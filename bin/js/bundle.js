var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
var laya;
(function (laya) {
    var Sprite = Laya.Sprite;
    var Stage = Laya.Stage;
    var WebGL = Laya.WebGL;
    var Sprite_DrawShapes = /** @class */ (function () {
        function Sprite_DrawShapes() {
            // 不支持WebGL时自动切换至Canvas
            Laya.init(1000, 1000, WebGL);
            Laya.stage.alignV = Stage.ALIGN_MIDDLE;
            Laya.stage.alignH = Stage.ALIGN_CENTER;
            Laya.stage.scaleMode = "showall";
            Laya.stage.bgColor = "white";
            this.drawMap();
        }
        //画地图
        Sprite_DrawShapes.prototype.drawMap = function () {
            var a = new Array();
            for (var m = 0; m < 100; m++) {
                a[m] = new Array();
                for (var n = 0; n < 100; n++) {
                    a[m][n] = m + n;
                }
            }
            this.sp = new Sprite();
            Laya.stage.addChild(this.sp);
            //画矩形
            for (var i = 0; i < 100; i++) {
                //[m,n]随机取整表达式Math.floor(Math.random()*(m-n)+n);
                var randomy0 = Math.floor(Math.random() * (1 - 100) + 100);
                var randomy1 = Math.floor(Math.random() * (1 - 100) + 100);
                var randomy2 = Math.floor(Math.random() * (1 - 100) + 100);
                var randomy3 = Math.floor(Math.random() * (1 - 100) + 100);
                for (var j = 0; j < 100; j++) {
                    if (randomy0 == j || randomy1 == j || randomy2 == j || randomy3 == j) {
                        this.sp.graphics.drawRect(10 * i, 10 * j, 10, 10, "white");
                        this.x = 10 * i;
                        this.y = 10 * j;
                        this.color = "white";
                        this.pos = [this.x, this.y, this.color];
                        a[i][j] = this.pos;
                    }
                    else if (i % 2 == 0) {
                        this.sp.graphics.drawRect(10 * i, 10 * j, 10, 10, "white");
                        this.x = 10 * i;
                        this.y = 10 * j;
                        this.color = "white";
                        this.pos = [this.x, this.y, this.color];
                        a[i][j] = this.pos;
                    }
                    else {
                        this.sp.graphics.drawRect(10 * i, 10 * j, 10, 10, "black");
                        this.x = 10 * i;
                        this.y = 10 * j;
                        this.color = "black";
                        this.pos = [this.x, this.y, this.color];
                        a[i][j] = this.pos;
                    }
                }
            }
            for (var i = 0; i < 100; i++)
                for (var j = 0; j < 100; j++) {
                    if (i % 2 != 0 && a[i][j][2] == "white")
                        this.sp.graphics.drawRect(10 * i, 10 * j, 10, 10, "red");
                }
            for (var i = 0; i < 100; i++)
                for (var j = 0; j < 100; j++) {
                    if (i % 2 == 0 && a[i][j][2] == "white" && a[i + 1][j] == "red")
                        this.sp.graphics.drawRect(10 * i, 10 * j, 10, 10, "white");
                }
        };
        return Sprite_DrawShapes;
    }());
    laya.Sprite_DrawShapes = Sprite_DrawShapes;
})(laya || (laya = {}));
new laya.Sprite_DrawShapes();
},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
